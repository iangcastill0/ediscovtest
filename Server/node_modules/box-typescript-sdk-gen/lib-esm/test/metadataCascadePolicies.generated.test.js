"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.client = void 0;
const utils_js_1 = require("../internal/utils.js");
const utils_js_2 = require("../internal/utils.js");
const utils_js_3 = require("../internal/utils.js");
const commons_generated_js_1 = require("./commons.generated.js");
const commons_generated_js_2 = require("./commons.generated.js");
exports.client = (0, commons_generated_js_1.getDefaultClient)();
test('testMetadataCascadePolicies', async function testMetadataCascadePolicies() {
    const templateKey = ''.concat('key', (0, utils_js_1.getUuid)());
    await exports.client.metadataTemplates.createMetadataTemplate({
        scope: 'enterprise',
        displayName: templateKey,
        templateKey: templateKey,
        fields: [
            {
                type: 'string',
                key: 'testName',
                displayName: 'testName',
            },
        ],
    });
    const folder = await (0, commons_generated_js_2.createNewFolder)();
    const enterpriseId = (0, utils_js_2.getEnvVar)('ENTERPRISE_ID');
    const cascadePolicy = await exports.client.metadataCascadePolicies.createMetadataCascadePolicy({
        folderId: folder.id,
        scope: 'enterprise',
        templateKey: templateKey,
    });
    if (!((0, utils_js_3.toString)(cascadePolicy.type) == 'metadata_cascade_policy')) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_3.toString)(cascadePolicy.ownerEnterprise.type) == 'enterprise')) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_3.toString)(cascadePolicy.ownerEnterprise.id) == enterpriseId)) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_3.toString)(cascadePolicy.parent.type) == 'folder')) {
        throw new Error('Assertion failed');
    }
    if (!(cascadePolicy.parent.id == folder.id)) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_3.toString)(cascadePolicy.scope) ==
        ''.concat('enterprise_', enterpriseId))) {
        throw new Error('Assertion failed');
    }
    if (!(cascadePolicy.templateKey == templateKey)) {
        throw new Error('Assertion failed');
    }
    const cascadePolicyId = cascadePolicy.id;
    const policyFromTheApi = await exports.client.metadataCascadePolicies.getMetadataCascadePolicyById(cascadePolicyId);
    if (!(cascadePolicyId == policyFromTheApi.id)) {
        throw new Error('Assertion failed');
    }
    const policies = await exports.client.metadataCascadePolicies.getMetadataCascadePolicies({
        folderId: folder.id,
    });
    if (!(policies.entries.length == 1)) {
        throw new Error('Assertion failed');
    }
    await expect(async () => {
        await exports.client.metadataCascadePolicies.applyMetadataCascadePolicy(cascadePolicyId, {
            conflictResolution: 'overwrite',
        });
    }).rejects.toThrow();
    await exports.client.folderMetadata.createFolderMetadataById(folder.id, 'enterprise', templateKey, { ['testName']: 'xyz' });
    await exports.client.metadataCascadePolicies.applyMetadataCascadePolicy(cascadePolicyId, {
        conflictResolution: 'overwrite',
    });
    await exports.client.metadataCascadePolicies.deleteMetadataCascadePolicyById(cascadePolicyId);
    await expect(async () => {
        await exports.client.metadataCascadePolicies.getMetadataCascadePolicyById(cascadePolicyId);
    }).rejects.toThrow();
    await exports.client.metadataTemplates.deleteMetadataTemplate('enterprise', templateKey);
    await exports.client.folders.deleteFolderById(folder.id);
});
//# sourceMappingURL=metadataCascadePolicies.generated.test.js.map