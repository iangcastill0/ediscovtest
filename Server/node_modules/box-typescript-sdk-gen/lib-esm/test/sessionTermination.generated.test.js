"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.client = void 0;
const utils_js_1 = require("../internal/utils.js");
const utils_js_2 = require("../internal/utils.js");
const commons_generated_js_1 = require("./commons.generated.js");
const commons_generated_js_2 = require("./commons.generated.js");
exports.client = (0, commons_generated_js_1.getDefaultClient)();
test('testSessionTerminationUser', async function testSessionTerminationUser() {
    const adminClient = (0, commons_generated_js_2.getDefaultClientWithUserSubject)((0, utils_js_2.getEnvVar)('USER_ID'));
    const user = await adminClient.users.getUserMe();
    const result = await exports.client.sessionTermination.terminateUsersSessions({
        userIds: [(0, utils_js_2.getEnvVar)('USER_ID')],
        userLogins: [user.login],
    });
    if (!(result.message ==
        'Request is successful, please check the admin events for the status of the job')) {
        throw new Error('Assertion failed');
    }
});
test('testSessionTerminationGroup', async function testSessionTerminationGroup() {
    const groupName = (0, utils_js_1.getUuid)();
    const group = await exports.client.groups.createGroup({
        name: groupName,
    });
    const result = await exports.client.sessionTermination.terminateGroupsSessions({
        groupIds: [group.id],
    });
    if (!(result.message ==
        'Request is successful, please check the admin events for the status of the job')) {
        throw new Error('Assertion failed');
    }
    await exports.client.groups.deleteGroupById(group.id);
});
//# sourceMappingURL=sessionTermination.generated.test.js.map