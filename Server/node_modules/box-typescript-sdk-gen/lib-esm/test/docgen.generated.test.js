"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.client = void 0;
const fileReferenceV2025R0_generated_js_1 = require("../schemas/v2025R0/fileReferenceV2025R0.generated.js");
const docGenBatchCreateRequestV2025R0_generated_js_1 = require("../schemas/v2025R0/docGenBatchCreateRequestV2025R0.generated.js");
const commons_generated_js_1 = require("./commons.generated.js");
const commons_generated_js_2 = require("./commons.generated.js");
const commons_generated_js_3 = require("./commons.generated.js");
const utils_js_1 = require("../internal/utils.js");
exports.client = (0, commons_generated_js_1.getDefaultClient)();
test('testDocgenBatchAndJobs', async function testDocgenBatchAndJobs() {
    const uploadedFile = await (0, commons_generated_js_2.uploadNewFile)();
    const folder = await (0, commons_generated_js_3.createNewFolder)();
    const createdDocgenTemplate = await exports.client.docgenTemplate.createDocgenTemplateV2025R0({
        file: new fileReferenceV2025R0_generated_js_1.FileReferenceV2025R0({ id: uploadedFile.id }),
    });
    const docgenBatch = await exports.client.docgen.createDocgenBatchV2025R0({
        file: new fileReferenceV2025R0_generated_js_1.FileReferenceV2025R0({ id: uploadedFile.id }),
        inputSource: 'api',
        destinationFolder: new docGenBatchCreateRequestV2025R0_generated_js_1.DocGenBatchCreateRequestV2025R0DestinationFolderField({
            id: folder.id,
        }),
        outputType: 'pdf',
        documentGenerationData: [
            {
                generatedFileName: 'test',
                userInput: { ['abc']: 'xyz' },
            },
        ],
    });
    if (!!(docgenBatch.id == '')) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_1.toString)(docgenBatch.type) == 'docgen_batch')) {
        throw new Error('Assertion failed');
    }
    const docgenBatchJobs = await exports.client.docgen.getDocgenBatchJobByIdV2025R0(docgenBatch.id);
    if (!(docgenBatchJobs.entries.length >= 1)) {
        throw new Error('Assertion failed');
    }
    if (!!(docgenBatchJobs.entries[0].id == '')) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_1.toString)(docgenBatchJobs.entries[0].type) == 'docgen_job')) {
        throw new Error('Assertion failed');
    }
    if (!(docgenBatchJobs.entries[0].outputType == 'pdf')) {
        throw new Error('Assertion failed');
    }
    if (!!((0, utils_js_1.toString)(docgenBatchJobs.entries[0].status) == '')) {
        throw new Error('Assertion failed');
    }
    if (!(docgenBatchJobs.entries[0].templateFile.id == uploadedFile.id)) {
        throw new Error('Assertion failed');
    }
    if (!(docgenBatchJobs.entries[0].batch.id == docgenBatch.id)) {
        throw new Error('Assertion failed');
    }
    const docgenJobs = await exports.client.docgen.getDocgenJobsV2025R0({
        limit: 10000,
    });
    if (!(docgenJobs.entries.length >= 1)) {
        throw new Error('Assertion failed');
    }
    if (!!(docgenJobs.entries[0].batch.id == '')) {
        throw new Error('Assertion failed');
    }
    if (!!(docgenJobs.entries[0].createdBy.id == '')) {
        throw new Error('Assertion failed');
    }
    if (!!(docgenJobs.entries[0].enterprise.id == '')) {
        throw new Error('Assertion failed');
    }
    if (!!(docgenJobs.entries[0].id == '')) {
        throw new Error('Assertion failed');
    }
    if (!!(docgenJobs.entries[0].outputType == '')) {
        throw new Error('Assertion failed');
    }
    if (!!(docgenJobs.entries[0].source == '')) {
        throw new Error('Assertion failed');
    }
    if (!!((0, utils_js_1.toString)(docgenJobs.entries[0].status) == '')) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_1.toString)(docgenJobs.entries[0].templateFile.type) == 'file')) {
        throw new Error('Assertion failed');
    }
    if (!!(docgenJobs.entries[0].templateFile.id == '')) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_1.toString)(docgenJobs.entries[0].templateFileVersion.type) ==
        'file_version')) {
        throw new Error('Assertion failed');
    }
    if (!!(docgenJobs.entries[0].templateFileVersion.id == '')) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_1.toString)(docgenJobs.entries[0].type) == 'docgen_job')) {
        throw new Error('Assertion failed');
    }
    const indexOfItem = docgenJobs.entries.length - 1;
    const docgenJobItemFromList = docgenJobs.entries[indexOfItem];
    const docgenJob = await exports.client.docgen.getDocgenJobByIdV2025R0(docgenJobItemFromList.id);
    if (!!(docgenJob.batch.id == '')) {
        throw new Error('Assertion failed');
    }
    if (!!(docgenJob.id == '')) {
        throw new Error('Assertion failed');
    }
    if (!!(docgenJob.outputType == '')) {
        throw new Error('Assertion failed');
    }
    if (!!((0, utils_js_1.toString)(docgenJob.status) == '')) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_1.toString)(docgenJob.templateFile.type) == 'file')) {
        throw new Error('Assertion failed');
    }
    if (!!(docgenJob.templateFile.id == '')) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_1.toString)(docgenJob.templateFileVersion.type) == 'file_version')) {
        throw new Error('Assertion failed');
    }
    if (!!(docgenJob.templateFileVersion.id == '')) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_1.toString)(docgenJob.type) == 'docgen_job')) {
        throw new Error('Assertion failed');
    }
    await exports.client.folders.deleteFolderById(folder.id);
    await exports.client.files.deleteFileById(uploadedFile.id);
});
//# sourceMappingURL=docgen.generated.test.js.map