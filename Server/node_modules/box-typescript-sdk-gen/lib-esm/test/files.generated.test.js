"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.client = void 0;
exports.uploadFile = uploadFile;
const files_generated_js_1 = require("../managers/files.generated.js");
const utils_js_1 = require("../internal/utils.js");
const utils_js_2 = require("../internal/utils.js");
const utils_js_3 = require("../internal/utils.js");
const utils_js_4 = require("../internal/utils.js");
const utils_js_5 = require("../internal/utils.js");
const utils_js_6 = require("../internal/utils.js");
const utils_js_7 = require("../internal/utils.js");
const commons_generated_js_1 = require("./commons.generated.js");
const commons_generated_js_2 = require("./commons.generated.js");
exports.client = (0, commons_generated_js_2.getDefaultClient)();
async function uploadFile(fileName, fileStream) {
    const uploadedFiles = await exports.client.uploads.uploadFile({
        attributes: {
            name: fileName,
            parent: { id: '0' },
        },
        file: fileStream,
    });
    return uploadedFiles.entries[0];
}
test('testGetFileThumbnailUrl', async function testGetFileThumbnailUrl() {
    const thumbnailFileName = (0, utils_js_1.getUuid)();
    const thumbnailContentStream = (0, utils_js_2.generateByteStream)(1024 * 1024);
    const thumbnailFile = await uploadFile(thumbnailFileName, thumbnailContentStream);
    const downloadUrl = await exports.client.files.getFileThumbnailUrl(thumbnailFile.id, 'png');
    if (!!(downloadUrl == void 0)) {
        throw new Error('Assertion failed');
    }
    if (!downloadUrl.includes('https://')) {
        throw new Error('Assertion failed');
    }
    await exports.client.files.deleteFileById(thumbnailFile.id);
});
test('testGetFileThumbnail', async function testGetFileThumbnail() {
    const thumbnailFileName = (0, utils_js_1.getUuid)();
    const thumbnailBuffer = (0, utils_js_5.generateByteBuffer)(1024 * 1024);
    const thumbnailContentStream = (0, utils_js_4.generateByteStreamFromBuffer)(thumbnailBuffer);
    const thumbnailFile = await uploadFile(thumbnailFileName, thumbnailContentStream);
    const thumbnail = await exports.client.files.getFileThumbnailById(thumbnailFile.id, 'png');
    if (!!((0, utils_js_6.bufferEquals)(await (0, utils_js_3.readByteStream)(thumbnail), thumbnailBuffer) == true)) {
        throw new Error('Assertion failed');
    }
    await exports.client.files.deleteFileById(thumbnailFile.id);
});
test('testGetFileFullExtraFields', async function testGetFileFullExtraFields() {
    const newFileName = (0, utils_js_1.getUuid)();
    const fileStream = (0, utils_js_2.generateByteStream)(1024 * 1024);
    const uploadedFile = await uploadFile(newFileName, fileStream);
    const file = await exports.client.files.getFileById(uploadedFile.id, {
        queryParams: {
            fields: ['is_externally_owned', 'has_collaborations'],
        },
    });
    if (!(file.isExternallyOwned == false)) {
        throw new Error('Assertion failed');
    }
    if (!(file.hasCollaborations == false)) {
        throw new Error('Assertion failed');
    }
    await exports.client.files.deleteFileById(file.id);
});
test('testCreateGetAndDeleteFile', async function testCreateGetAndDeleteFile() {
    const newFileName = (0, utils_js_1.getUuid)();
    const updatedContentStream = (0, utils_js_2.generateByteStream)(1024 * 1024);
    const uploadedFile = await uploadFile(newFileName, updatedContentStream);
    const file = await exports.client.files.getFileById(uploadedFile.id);
    await expect(async () => {
        await exports.client.files.getFileById(uploadedFile.id, {
            queryParams: { fields: ['name'] },
            headers: new files_generated_js_1.GetFileByIdHeaders({
                extraHeaders: { ['if-none-match']: file.etag },
            }),
        });
    }).rejects.toThrow();
    if (!(file.name == newFileName)) {
        throw new Error('Assertion failed');
    }
    await exports.client.files.deleteFileById(uploadedFile.id);
    const trashedFile = await exports.client.trashedFiles.getTrashedFileById(uploadedFile.id);
    if (!(file.id == trashedFile.id)) {
        throw new Error('Assertion failed');
    }
});
test('testUpdateFile', async function testUpdateFile() {
    const fileToUpdate = await (0, commons_generated_js_1.uploadNewFile)();
    const updatedName = (0, utils_js_1.getUuid)();
    const updatedFile = await exports.client.files.updateFileById(fileToUpdate.id, {
        requestBody: {
            name: updatedName,
            description: 'Updated description',
        },
    });
    if (!(updatedFile.name == updatedName)) {
        throw new Error('Assertion failed');
    }
    if (!(updatedFile.description == 'Updated description')) {
        throw new Error('Assertion failed');
    }
    await exports.client.files.deleteFileById(updatedFile.id);
});
test('testFileLock', async function testFileLock() {
    const file = await (0, commons_generated_js_1.uploadNewFile)();
    const fileWithLock = await exports.client.files.updateFileById(file.id, {
        requestBody: {
            lock: {
                access: 'lock',
            },
        },
        queryParams: { fields: ['lock'] },
    });
    if (!!(fileWithLock.lock == void 0)) {
        throw new Error('Assertion failed');
    }
    const fileWithoutLock = await exports.client.files.updateFileById(file.id, {
        requestBody: { lock: (0, utils_js_7.createNull)() },
        queryParams: { fields: ['lock'] },
    });
    if (!(fileWithoutLock.lock == void 0)) {
        throw new Error('Assertion failed');
    }
    await exports.client.files.deleteFileById(file.id);
});
test('testCopyFile', async function testCopyFile() {
    const fileOrigin = await (0, commons_generated_js_1.uploadNewFile)();
    const copiedFileName = (0, utils_js_1.getUuid)();
    const copiedFile = await exports.client.files.copyFile(fileOrigin.id, {
        parent: { id: '0' },
        name: copiedFileName,
    });
    if (!(copiedFile.parent.id == '0')) {
        throw new Error('Assertion failed');
    }
    if (!(copiedFile.name == copiedFileName)) {
        throw new Error('Assertion failed');
    }
    await exports.client.files.deleteFileById(fileOrigin.id);
    await exports.client.files.deleteFileById(copiedFile.id);
});
//# sourceMappingURL=files.generated.test.js.map