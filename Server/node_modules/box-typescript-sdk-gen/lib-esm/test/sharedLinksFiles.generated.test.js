"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.client = void 0;
const utils_js_1 = require("../internal/utils.js");
const utils_js_2 = require("../internal/utils.js");
const utils_js_3 = require("../internal/utils.js");
const commons_generated_js_1 = require("./commons.generated.js");
const commons_generated_js_2 = require("./commons.generated.js");
const utils_js_4 = require("../internal/utils.js");
const utils_js_5 = require("../internal/utils.js");
exports.client = (0, commons_generated_js_1.getDefaultClient)();
test('testSharedLinksFiles', async function testSharedLinksFiles() {
    const uploadedFiles = await exports.client.uploads.uploadFile({
        attributes: {
            name: (0, utils_js_1.getUuid)(),
            parent: { id: '0' },
        },
        file: (0, utils_js_2.generateByteStream)(10),
    });
    const fileId = uploadedFiles.entries[0].id;
    await exports.client.sharedLinksFiles.addShareLinkToFile(fileId, {
        sharedLink: {
            access: 'open',
            password: 'Secret123@',
        },
    }, { fields: 'shared_link' });
    const fileFromApi = await exports.client.sharedLinksFiles.getSharedLinkForFile(fileId, {
        fields: 'shared_link',
    });
    if (!((0, utils_js_5.toString)(fileFromApi.sharedLink.access) == 'open')) {
        throw new Error('Assertion failed');
    }
    const userId = (0, utils_js_3.getEnvVar)('USER_ID');
    const userClient = (0, commons_generated_js_2.getDefaultClientWithUserSubject)(userId);
    const fileFromSharedLinkPassword = await userClient.sharedLinksFiles.findFileForSharedLink({}, {
        boxapi: ''.concat('shared_link=', fileFromApi.sharedLink.url, '&shared_link_password=Secret123@'),
    });
    if (!(fileId == fileFromSharedLinkPassword.id)) {
        throw new Error('Assertion failed');
    }
    await expect(async () => {
        await userClient.sharedLinksFiles.findFileForSharedLink({}, {
            boxapi: ''.concat('shared_link=', fileFromApi.sharedLink.url, '&shared_link_password=incorrectPassword'),
        });
    }).rejects.toThrow();
    const updatedFile = await exports.client.sharedLinksFiles.updateSharedLinkOnFile(fileId, {
        sharedLink: {
            access: 'collaborators',
        },
    }, { fields: 'shared_link' });
    if (!((0, utils_js_5.toString)(updatedFile.sharedLink.access) == 'collaborators')) {
        throw new Error('Assertion failed');
    }
    await exports.client.sharedLinksFiles.removeSharedLinkFromFile(fileId, { sharedLink: (0, utils_js_4.createNull)() }, { fields: 'shared_link' });
    const fileFromApiAfterRemove = await exports.client.sharedLinksFiles.getSharedLinkForFile(fileId, {
        fields: 'shared_link',
    });
    if (!(fileFromApiAfterRemove.sharedLink == void 0)) {
        throw new Error('Assertion failed');
    }
    await exports.client.files.deleteFileById(fileId);
});
//# sourceMappingURL=sharedLinksFiles.generated.test.js.map