"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.client = void 0;
const uploads_generated_js_1 = require("../managers/uploads.generated.js");
const utils_js_1 = require("../internal/utils.js");
const utils_js_2 = require("../internal/utils.js");
const utils_js_3 = require("../internal/utils.js");
const commons_generated_js_1 = require("./commons.generated.js");
exports.client = (0, commons_generated_js_1.getDefaultClient)();
test('testUploadFileAndFileVersion', async function testUploadFileAndFileVersion() {
    const newFileName = (0, utils_js_1.getUuid)();
    const fileContentStream = (0, utils_js_2.generateByteStream)(1024 * 1024);
    const uploadedFiles = await exports.client.uploads.uploadFile({
        attributes: {
            name: newFileName,
            parent: { id: '0' },
        },
        file: fileContentStream,
    });
    const uploadedFile = uploadedFiles.entries[0];
    if (!(uploadedFile.name == newFileName)) {
        throw new Error('Assertion failed');
    }
    const newFileVersionName = (0, utils_js_1.getUuid)();
    const newFileContentStream = (0, utils_js_2.generateByteStream)(1024 * 1024);
    const uploadedFilesVersion = await exports.client.uploads.uploadFileVersion(uploadedFile.id, {
        attributes: {
            name: newFileVersionName,
        },
        file: newFileContentStream,
    });
    const newFileVersion = uploadedFilesVersion.entries[0];
    if (!(newFileVersion.name == newFileVersionName)) {
        throw new Error('Assertion failed');
    }
    await exports.client.files.deleteFileById(newFileVersion.id);
});
test('testRequestCancellation', async function testRequestCancellation() {
    const fileSize = 1024 * 1024;
    const fileName = (0, utils_js_1.getUuid)();
    const fileByteStream = (0, utils_js_2.generateByteStream)(fileSize);
    const cancellationToken = (0, utils_js_3.createTokenAndCancelAfter)(1);
    await expect(async () => {
        await exports.client.uploads.uploadFile({
            attributes: {
                name: fileName,
                parent: {
                    id: '0',
                },
            },
            file: fileByteStream,
        }, {
            queryParams: {},
            headers: new uploads_generated_js_1.UploadFileHeaders({}),
            cancellationToken: cancellationToken,
        });
    }).rejects.toThrow();
});
test('testUploadFileWithPreflightCheck', async function testUploadFileWithPreflightCheck() {
    const newFileName = (0, utils_js_1.getUuid)();
    const fileContentStream = (0, utils_js_2.generateByteStream)(1024 * 1024);
    await expect(async () => {
        await exports.client.uploads.uploadWithPreflightCheck({
            attributes: {
                name: newFileName,
                size: -1,
                parent: {
                    id: '0',
                },
            },
            file: fileContentStream,
        });
    }).rejects.toThrow();
    const uploadFilesWithPreflight = await exports.client.uploads.uploadWithPreflightCheck({
        attributes: {
            name: newFileName,
            size: 1024 * 1024,
            parent: {
                id: '0',
            },
        },
        file: fileContentStream,
    });
    const file = uploadFilesWithPreflight.entries[0];
    if (!(file.name == newFileName)) {
        throw new Error('Assertion failed');
    }
    if (!(file.size == 1024 * 1024)) {
        throw new Error('Assertion failed');
    }
    await expect(async () => {
        await exports.client.uploads.uploadWithPreflightCheck({
            attributes: {
                name: newFileName,
                size: 1024 * 1024,
                parent: {
                    id: '0',
                },
            },
            file: fileContentStream,
        });
    }).rejects.toThrow();
    await exports.client.files.deleteFileById(file.id);
});
test('testPreflightCheck', async function testPreflightCheck() {
    const newFileName = (0, utils_js_1.getUuid)();
    const preflightCheckResult = await exports.client.uploads.preflightFileUploadCheck({
        name: newFileName,
        size: 1024 * 1024,
        parent: {
            id: '0',
        },
    });
    if (!!(preflightCheckResult.uploadUrl == '')) {
        throw new Error('Assertion failed');
    }
});
//# sourceMappingURL=uploads.generated.test.js.map