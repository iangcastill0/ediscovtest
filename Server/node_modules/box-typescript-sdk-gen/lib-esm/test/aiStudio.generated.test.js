"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.client = void 0;
const aiStudioAgentAsk_generated_js_1 = require("../schemas/aiStudioAgentAsk.generated.js");
const commons_generated_js_1 = require("./commons.generated.js");
const commons_generated_js_2 = require("./commons.generated.js");
const utils_js_1 = require("../internal/utils.js");
const aiAgentReference_generated_js_1 = require("../schemas/aiAgentReference.generated.js");
const utils_js_2 = require("../internal/utils.js");
exports.client = (0, commons_generated_js_1.getDefaultClient)();
test('testAiStudioCRUD', async function testAiStudioCRUD() {
    const agentName = (0, utils_js_1.getUuid)();
    const createdAgent = await exports.client.aiStudio.createAiAgent({
        name: agentName,
        accessState: 'enabled',
        ask: new aiStudioAgentAsk_generated_js_1.AiStudioAgentAsk({
            accessState: 'enabled',
            description: 'desc1',
        }),
    });
    if (!(createdAgent.name == agentName)) {
        throw new Error('Assertion failed');
    }
    const agents = await exports.client.aiStudio.getAiAgents();
    const numAgents = agents.entries.length;
    if (!((0, utils_js_2.toString)(agents.entries[0].type) == 'ai_agent')) {
        throw new Error('Assertion failed');
    }
    const retrievedAgent = await exports.client.aiStudio.getAiAgentById(createdAgent.id, {
        queryParams: { fields: ['ask'] },
    });
    if (!(retrievedAgent.name == agentName)) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_2.toString)(retrievedAgent.accessState) == 'enabled')) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_2.toString)(retrievedAgent.ask.accessState) == 'enabled')) {
        throw new Error('Assertion failed');
    }
    if (!(retrievedAgent.ask.description == 'desc1')) {
        throw new Error('Assertion failed');
    }
    const updatedAgent = await exports.client.aiStudio.updateAiAgentById(createdAgent.id, {
        name: agentName,
        accessState: 'enabled',
        ask: new aiStudioAgentAsk_generated_js_1.AiStudioAgentAsk({
            accessState: 'disabled',
            description: 'desc2',
        }),
    });
    if (!((0, utils_js_2.toString)(updatedAgent.accessState) == 'enabled')) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_2.toString)(updatedAgent.ask.accessState) == 'disabled')) {
        throw new Error('Assertion failed');
    }
    if (!(updatedAgent.ask.description == 'desc2')) {
        throw new Error('Assertion failed');
    }
    await exports.client.aiStudio.deleteAiAgentById(createdAgent.id);
    const agentsAfterDelete = await exports.client.aiStudio.getAiAgents();
    if (!(agentsAfterDelete.entries.length == numAgents - 1)) {
        throw new Error('Assertion failed');
    }
});
test('testUseAIAgentReferenceInAIAsk', async function testUseAIAgentReferenceInAIAsk() {
    const agentName = (0, utils_js_1.getUuid)();
    const createdAgent = await exports.client.aiStudio.createAiAgent({
        name: agentName,
        accessState: 'enabled',
        ask: new aiStudioAgentAsk_generated_js_1.AiStudioAgentAsk({
            accessState: 'enabled',
            description: 'desc1',
        }),
    });
    const fileToAsk = await (0, commons_generated_js_2.uploadNewFile)();
    const response = await exports.client.ai.createAiAsk({
        mode: 'single_item_qa',
        prompt: 'which direction sun rises',
        items: [
            {
                id: fileToAsk.id,
                type: 'file',
                content: 'Sun rises in the East',
            },
        ],
        aiAgent: new aiAgentReference_generated_js_1.AiAgentReference({ id: createdAgent.id }),
    });
    if (!response.answer.includes('East')) {
        throw new Error('Assertion failed');
    }
    if (!(response.completionReason == 'done')) {
        throw new Error('Assertion failed');
    }
    if (!(response.aiAgentInfo.models.length > 0)) {
        throw new Error('Assertion failed');
    }
    await exports.client.files.deleteFileById(fileToAsk.id);
    await exports.client.aiStudio.deleteAiAgentById(createdAgent.id);
});
//# sourceMappingURL=aiStudio.generated.test.js.map