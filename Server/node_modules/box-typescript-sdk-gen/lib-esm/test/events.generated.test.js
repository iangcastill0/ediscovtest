"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.client = void 0;
const commons_generated_js_1 = require("./commons.generated.js");
const utils_js_1 = require("../internal/utils.js");
const utils_js_2 = require("../internal/utils.js");
const utils_js_3 = require("../internal/utils.js");
exports.client = (0, commons_generated_js_1.getDefaultClient)();
test('testEvents', async function testEvents() {
    const events = await exports.client.events.getEvents();
    if (!(events.entries.length > 0)) {
        throw new Error('Assertion failed');
    }
    const firstEvent = events.entries[0];
    if (!((0, utils_js_3.toString)(firstEvent.createdBy.type) == 'user')) {
        throw new Error('Assertion failed');
    }
    if (!!((0, utils_js_3.toString)(firstEvent.eventType) == '')) {
        throw new Error('Assertion failed');
    }
});
test('testEventUpload', async function testEventUpload() {
    const events = await exports.client.events.getEvents({
        streamType: 'admin_logs',
        eventType: ['UPLOAD'],
    });
    if (!(events.entries.length > 0)) {
        throw new Error('Assertion failed');
    }
    const firstEvent = events.entries[0];
    if (!((0, utils_js_3.toString)(firstEvent.eventType) == 'UPLOAD')) {
        throw new Error('Assertion failed');
    }
    const source = firstEvent.source;
    if (!((0, utils_js_3.toString)(source.itemType) == 'file' ||
        (0, utils_js_3.toString)(source.itemType) == 'folder')) {
        throw new Error('Assertion failed');
    }
    if (!!(source.itemId == '')) {
        throw new Error('Assertion failed');
    }
    if (!!(source.itemName == '')) {
        throw new Error('Assertion failed');
    }
});
test('testEventDeleteUser', async function testEventDeleteUser() {
    const events = await exports.client.events.getEvents({
        streamType: 'admin_logs',
        eventType: ['DELETE_USER'],
    });
    if (!(events.entries.length > 0)) {
        throw new Error('Assertion failed');
    }
    const firstEvent = events.entries[0];
    if (!((0, utils_js_3.toString)(firstEvent.eventType) == 'DELETE_USER')) {
        throw new Error('Assertion failed');
    }
    const source = firstEvent.source;
    if (!((0, utils_js_3.toString)(source.type) == 'user')) {
        throw new Error('Assertion failed');
    }
    if (!!(source.id == '')) {
        throw new Error('Assertion failed');
    }
});
test('testEventSourceFileOrFolder', async function testEventSourceFileOrFolder() {
    const events = await exports.client.events.getEvents({
        streamType: 'changes',
    });
    if (!(events.entries.length > 0)) {
        throw new Error('Assertion failed');
    }
});
test('testGetEventsWithLongPolling', async function testGetEventsWithLongPolling() {
    const servers = await exports.client.events.getEventsWithLongPolling();
    if (!(servers.entries.length > 0)) {
        throw new Error('Assertion failed');
    }
    const server = servers.entries[0];
    if (!((0, utils_js_3.toString)(server.type) == 'realtime_server')) {
        throw new Error('Assertion failed');
    }
    if (!!(server.url == '')) {
        throw new Error('Assertion failed');
    }
});
test('testGetEventsWithDateFilters', async function testGetEventsWithDateFilters() {
    const currentEpochTimeInSeconds = (0, utils_js_1.getEpochTimeInSeconds)();
    const epochTimeInSecondsAWeekAgo = currentEpochTimeInSeconds - 7 * 24 * 60 * 60;
    const createdAfterDate = (0, utils_js_2.epochSecondsToDateTime)(epochTimeInSecondsAWeekAgo);
    const createdBeforeDate = (0, utils_js_2.epochSecondsToDateTime)(currentEpochTimeInSeconds);
    const servers = await exports.client.events.getEvents({
        streamType: 'admin_logs',
        limit: 1,
        createdAfter: createdAfterDate,
        createdBefore: createdBeforeDate,
    });
    if (!(servers.entries.length == 1)) {
        throw new Error('Assertion failed');
    }
});
test('testGetEventStream', function testGetEventStream() {
    const eventStream = exports.client.events.getEventStream();
    if (!!(eventStream == void 0)) {
        throw new Error('Assertion failed');
    }
});
//# sourceMappingURL=events.generated.test.js.map