"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_js_1 = require("../internal/utils.js");
const commons_generated_js_1 = require("./commons.generated.js");
const commons_generated_js_2 = require("./commons.generated.js");
const utils_js_2 = require("../internal/utils.js");
test('testShieldInformationBarriers', async function testShieldInformationBarriers() {
    const client = (0, commons_generated_js_1.getDefaultClientWithUserSubject)((0, utils_js_1.getEnvVar)('USER_ID'));
    const enterpriseId = (0, utils_js_1.getEnvVar)('ENTERPRISE_ID');
    const barrier = await (0, commons_generated_js_2.getOrCreateShieldInformationBarrier)(client, enterpriseId);
    if (!((0, utils_js_2.toString)(barrier.status) == 'draft')) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_2.toString)(barrier.type) == 'shield_information_barrier')) {
        throw new Error('Assertion failed');
    }
    if (!(barrier.enterprise.id == enterpriseId)) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_2.toString)(barrier.enterprise.type) == 'enterprise')) {
        throw new Error('Assertion failed');
    }
    const barrierId = barrier.id;
    const barrierFromApi = await client.shieldInformationBarriers.getShieldInformationBarrierById(barrierId);
    if (!(barrierFromApi.id == barrierId)) {
        throw new Error('Assertion failed');
    }
    const barriers = await client.shieldInformationBarriers.getShieldInformationBarriers();
    if (!(barriers.entries.length == 1)) {
        throw new Error('Assertion failed');
    }
    await expect(async () => {
        await client.shieldInformationBarriers.updateShieldInformationBarrierStatus({
            id: barrierId,
            status: 'disabled',
        });
    }).rejects.toThrow();
});
//# sourceMappingURL=shieldInformationBarriers.generated.test.js.map