"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.client = void 0;
const taskAssignments_generated_js_1 = require("../managers/taskAssignments.generated.js");
const commons_generated_js_1 = require("./commons.generated.js");
const commons_generated_js_2 = require("./commons.generated.js");
const utils_js_1 = require("../internal/utils.js");
const utils_js_2 = require("../internal/utils.js");
exports.client = (0, commons_generated_js_2.getDefaultClient)();
test('testCreateUpdateGetDeleteTaskAssignment', async function testCreateUpdateGetDeleteTaskAssignment() {
    const file = await (0, commons_generated_js_1.uploadNewFile)();
    const date = (0, utils_js_1.dateTimeFromString)('2035-01-01T00:00:00Z');
    const task = await exports.client.tasks.createTask({
        item: {
            type: 'file',
            id: file.id,
        },
        message: 'test message',
        dueAt: date,
        action: 'review',
        completionRule: 'all_assignees',
    });
    if (!(task.message == 'test message')) {
        throw new Error('Assertion failed');
    }
    if (!(task.item.id == file.id)) {
        throw new Error('Assertion failed');
    }
    const currentUser = await exports.client.users.getUserMe();
    const taskAssignment = await exports.client.taskAssignments.createTaskAssignment({
        task: new taskAssignments_generated_js_1.CreateTaskAssignmentRequestBodyTaskField({
            type: 'task',
            id: task.id,
        }),
        assignTo: {
            id: currentUser.id,
        },
    });
    if (!(taskAssignment.item.id == file.id)) {
        throw new Error('Assertion failed');
    }
    if (!(taskAssignment.assignedTo.id == currentUser.id)) {
        throw new Error('Assertion failed');
    }
    const taskAssignmentById = await exports.client.taskAssignments.getTaskAssignmentById(taskAssignment.id);
    if (!(taskAssignmentById.id == taskAssignment.id)) {
        throw new Error('Assertion failed');
    }
    const taskAssignmentsOnTask = await exports.client.taskAssignments.getTaskAssignments(task.id);
    if (!(taskAssignmentsOnTask.totalCount == 1)) {
        throw new Error('Assertion failed');
    }
    const updatedTaskAssignment = await exports.client.taskAssignments.updateTaskAssignmentById(taskAssignment.id, {
        requestBody: {
            message: 'updated message',
            resolutionState: 'approved',
        },
    });
    if (!(updatedTaskAssignment.message == 'updated message')) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_2.toString)(updatedTaskAssignment.resolutionState) == 'approved')) {
        throw new Error('Assertion failed');
    }
    await expect(async () => {
        await exports.client.taskAssignments.deleteTaskAssignmentById(taskAssignment.id);
    }).rejects.toThrow();
    await exports.client.files.deleteFileById(file.id);
});
//# sourceMappingURL=taskAssignments.generated.test.js.map