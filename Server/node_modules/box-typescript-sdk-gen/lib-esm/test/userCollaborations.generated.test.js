"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.client = void 0;
const utils_js_1 = require("../internal/utils.js");
const commons_generated_js_1 = require("./commons.generated.js");
const commons_generated_js_2 = require("./commons.generated.js");
const utils_js_2 = require("../internal/utils.js");
exports.client = (0, commons_generated_js_1.getDefaultClient)();
test('testUserCollaborations', async function testUserCollaborations() {
    const userName = (0, utils_js_1.getUuid)();
    const userLogin = ''.concat((0, utils_js_1.getUuid)(), '@gmail.com');
    const user = await exports.client.users.createUser({
        name: userName,
        login: userLogin,
        isPlatformAccessOnly: true,
    });
    const folder = await (0, commons_generated_js_2.createNewFolder)();
    const collaboration = await exports.client.userCollaborations.createCollaboration({
        item: {
            type: 'folder',
            id: folder.id,
        },
        accessibleBy: {
            type: 'user',
            id: user.id,
        },
        role: 'editor',
    });
    if (!((0, utils_js_2.toString)(collaboration.role) == 'editor')) {
        throw new Error('Assertion failed');
    }
    const collaborationId = collaboration.id;
    const collaborationFromApi = await exports.client.userCollaborations.getCollaborationById(collaborationId);
    if (!(collaborationId == collaborationFromApi.id)) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_2.toString)(collaborationFromApi.status) == 'accepted')) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_2.toString)(collaborationFromApi.type) == 'collaboration')) {
        throw new Error('Assertion failed');
    }
    if (!(collaborationFromApi.inviteEmail == void 0)) {
        throw new Error('Assertion failed');
    }
    const updatedCollaboration = await exports.client.userCollaborations.updateCollaborationById(collaborationId, {
        role: 'viewer',
    });
    if (!((0, utils_js_2.toString)(updatedCollaboration.role) == 'viewer')) {
        throw new Error('Assertion failed');
    }
    await exports.client.userCollaborations.deleteCollaborationById(collaborationId);
    await expect(async () => {
        await exports.client.userCollaborations.getCollaborationById(collaborationId);
    }).rejects.toThrow();
    await exports.client.folders.deleteFolderById(folder.id);
    await exports.client.users.deleteUserById(user.id);
});
test('testConvertingUserCollaborationToOwnership', async function testConvertingUserCollaborationToOwnership() {
    const userName = (0, utils_js_1.getUuid)();
    const userLogin = ''.concat((0, utils_js_1.getUuid)(), '@gmail.com');
    const user = await exports.client.users.createUser({
        name: userName,
        login: userLogin,
        isPlatformAccessOnly: true,
    });
    const folder = await (0, commons_generated_js_2.createNewFolder)();
    const collaboration = await exports.client.userCollaborations.createCollaboration({
        item: {
            type: 'folder',
            id: folder.id,
        },
        accessibleBy: {
            type: 'user',
            id: user.id,
        },
        role: 'editor',
    });
    if (!((0, utils_js_2.toString)(collaboration.role) == 'editor')) {
        throw new Error('Assertion failed');
    }
    const ownerCollaboration = await exports.client.userCollaborations.updateCollaborationById(collaboration.id, {
        role: 'owner',
    });
    if (!(ownerCollaboration == void 0)) {
        throw new Error('Assertion failed');
    }
    const folderCollaborations = await exports.client.listCollaborations.getFolderCollaborations(folder.id);
    const folderCollaboration = folderCollaborations.entries[0];
    await exports.client.userCollaborations.deleteCollaborationById(folderCollaboration.id);
    const userClient = exports.client.withAsUserHeader(user.id);
    await userClient.folders.deleteFolderById(folder.id);
    await userClient.trashedFolders.deleteTrashedFolderById(folder.id);
    await exports.client.users.deleteUserById(user.id);
});
test('testExternalUserCollaborations', async function testExternalUserCollaborations() {
    const userName = (0, utils_js_1.getUuid)();
    const userLogin = ''.concat((0, utils_js_1.getUuid)(), '@boxdemo.com');
    const folder = await (0, commons_generated_js_2.createNewFolder)();
    const collaboration = await exports.client.userCollaborations.createCollaboration({
        item: {
            type: 'folder',
            id: folder.id,
        },
        accessibleBy: {
            type: 'user',
            login: userLogin,
        },
        role: 'editor',
    });
    if (!((0, utils_js_2.toString)(collaboration.role) == 'editor')) {
        throw new Error('Assertion failed');
    }
    const collaborationId = collaboration.id;
    const collaborationFromApi = await exports.client.userCollaborations.getCollaborationById(collaborationId);
    if (!(collaborationId == collaborationFromApi.id)) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_2.toString)(collaborationFromApi.status) == 'pending')) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_2.toString)(collaborationFromApi.type) == 'collaboration')) {
        throw new Error('Assertion failed');
    }
    if (!(collaborationFromApi.inviteEmail == userLogin)) {
        throw new Error('Assertion failed');
    }
    const updatedCollaboration = await exports.client.userCollaborations.updateCollaborationById(collaborationId, {
        role: 'viewer',
    });
    if (!((0, utils_js_2.toString)(updatedCollaboration.role) == 'viewer')) {
        throw new Error('Assertion failed');
    }
    await exports.client.userCollaborations.deleteCollaborationById(collaborationId);
    await expect(async () => {
        await exports.client.userCollaborations.getCollaborationById(collaborationId);
    }).rejects.toThrow();
    await exports.client.folders.deleteFolderById(folder.id);
});
//# sourceMappingURL=userCollaborations.generated.test.js.map