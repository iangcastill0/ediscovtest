"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.client = void 0;
const commons_generated_js_1 = require("./commons.generated.js");
const utils_js_1 = require("../internal/utils.js");
const utils_js_2 = require("../internal/utils.js");
exports.client = (0, commons_generated_js_1.getDefaultClient)();
test('testCollaborationAllowlistEntries', async function testCollaborationAllowlistEntries() {
    const allowlist = await exports.client.collaborationAllowlistEntries.getCollaborationWhitelistEntries();
    if (!(allowlist.entries.length >= 0)) {
        throw new Error('Assertion failed');
    }
    const domain = ''.concat((0, utils_js_1.getUuid)(), 'example.com');
    const newEntry = await exports.client.collaborationAllowlistEntries.createCollaborationWhitelistEntry({
        direction: 'inbound',
        domain: domain,
    });
    if (!((0, utils_js_2.toString)(newEntry.type) == 'collaboration_whitelist_entry')) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_2.toString)(newEntry.direction) == 'inbound')) {
        throw new Error('Assertion failed');
    }
    if (!(newEntry.domain == domain)) {
        throw new Error('Assertion failed');
    }
    const entry = await exports.client.collaborationAllowlistEntries.getCollaborationWhitelistEntryById(newEntry.id);
    if (!(entry.id == newEntry.id)) {
        throw new Error('Assertion failed');
    }
    if (!((0, utils_js_2.toString)(entry.direction) ==
        (0, utils_js_2.toString)(newEntry.direction))) {
        throw new Error('Assertion failed');
    }
    if (!(entry.domain == domain)) {
        throw new Error('Assertion failed');
    }
    await exports.client.collaborationAllowlistEntries.deleteCollaborationWhitelistEntryById(entry.id);
    await expect(async () => {
        await exports.client.collaborationAllowlistEntries.getCollaborationWhitelistEntryById(entry.id);
    }).rejects.toThrow();
});
//# sourceMappingURL=collaborationAllowlistEntries.generated.test.js.map