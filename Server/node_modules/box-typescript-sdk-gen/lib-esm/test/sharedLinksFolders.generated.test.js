"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.client = void 0;
const utils_js_1 = require("../internal/utils.js");
const utils_js_2 = require("../internal/utils.js");
const commons_generated_js_1 = require("./commons.generated.js");
const commons_generated_js_2 = require("./commons.generated.js");
const utils_js_3 = require("../internal/utils.js");
const utils_js_4 = require("../internal/utils.js");
exports.client = (0, commons_generated_js_1.getDefaultClient)();
test('testSharedLinksFolders', async function testSharedLinksFolders() {
    const folder = await exports.client.folders.createFolder({
        name: (0, utils_js_1.getUuid)(),
        parent: { id: '0' },
    });
    await exports.client.sharedLinksFolders.addShareLinkToFolder(folder.id, {
        sharedLink: {
            access: 'open',
            password: 'Secret123@',
        },
    }, { fields: 'shared_link' });
    const folderFromApi = await exports.client.sharedLinksFolders.getSharedLinkForFolder(folder.id, {
        fields: 'shared_link',
    });
    if (!((0, utils_js_4.toString)(folderFromApi.sharedLink.access) == 'open')) {
        throw new Error('Assertion failed');
    }
    const userId = (0, utils_js_2.getEnvVar)('USER_ID');
    const userClient = (0, commons_generated_js_2.getDefaultClientWithUserSubject)(userId);
    const folderFromSharedLinkPassword = await userClient.sharedLinksFolders.findFolderForSharedLink({}, {
        boxapi: ''.concat('shared_link=', folderFromApi.sharedLink.url, '&shared_link_password=Secret123@'),
    });
    if (!(folder.id == folderFromSharedLinkPassword.id)) {
        throw new Error('Assertion failed');
    }
    await expect(async () => {
        await userClient.sharedLinksFolders.findFolderForSharedLink({}, {
            boxapi: ''.concat('shared_link=', folderFromApi.sharedLink.url, '&shared_link_password=incorrectPassword'),
        });
    }).rejects.toThrow();
    const updatedFolder = await exports.client.sharedLinksFolders.updateSharedLinkOnFolder(folder.id, {
        sharedLink: {
            access: 'collaborators',
        },
    }, { fields: 'shared_link' });
    if (!((0, utils_js_4.toString)(updatedFolder.sharedLink.access) == 'collaborators')) {
        throw new Error('Assertion failed');
    }
    await exports.client.sharedLinksFolders.removeSharedLinkFromFolder(folder.id, {
        sharedLink: (0, utils_js_3.createNull)(),
    }, { fields: 'shared_link' });
    const folderFromApiAfterRemove = await exports.client.sharedLinksFolders.getSharedLinkForFolder(folder.id, {
        fields: 'shared_link',
    });
    if (!(folderFromApiAfterRemove.sharedLink == void 0)) {
        throw new Error('Assertion failed');
    }
    await exports.client.folders.deleteFolderById(folder.id);
});
//# sourceMappingURL=sharedLinksFolders.generated.test.js.map